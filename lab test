/**
 * Program description : to display appointment details 
 * Programmer : AA
 * Date : 12 MARCH 2024
 */
// Import the respective packages
import java.io.*;
import java.util.*;

class Employee 
{
    private String name;
    private double baseSalary;
    private int yearsOfService;

    public Employee(String name, double baseSalary, int yearsOfService) 
    {
        this.name = name;
        this.baseSalary = baseSalary;
        this.yearsOfService = yearsOfService;
    }

    public String getName() 
    {
        return name;
    }

    public double calculateAnnualSalary() 
    {
        return baseSalary * (1 + yearsOfService * 0.05);
    }

    public int getYearsOfService() 
    {
        return yearsOfService;
    }
}

public class EmployeeSalaryProcessor 
{
    public static void main(String[] args) {
        List<Employee> employees = new ArrayList<>();

        try (Scanner scanner = new Scanner(new File("employeeSalaries.txt"));
             PrintWriter writer = new PrintWriter("employeeData.txt")) 
             {

            while (scanner.hasNextLine()) 
            {
                String[] employeeData = scanner.nextLine().split(",");
                if (employeeData.length != 3) 
                {
                    throw new IllegalArgumentException("Invalid data format in input file");
                }
                String name = employeeData[0];
                double baseSalary = Double.parseDouble(employeeData[1]);
                int yearsOfService = Integer.parseInt(employeeData[2]);
                employees.add(new Employee(name, baseSalary, yearsOfService));
            }

            // Calculate and display annual salary for each employee
            for (Employee employee : employees) 
            {
                double annualSalary = employee.calculateAnnualSalary();
                System.out.println("Annual Salary for " + employee.getName() + ": $" + annualSalary);
                writer.println("Employee Name: " + employee.getName() + ", Annual Salary: $" + annualSalary + ", Years of Service: " + employee.getYearsOfService());
            }

            // Identify and display top-performing employee
            Employee topPerformer = Collections.max(employees, Comparator.comparing(Employee::calculateAnnualSalary));
            System.out.println("Top Performing Employee: " + topPerformer.getName());

            // Identify and display employee with least years of service
            Employee leastYearsOfService = Collections.min(employees, Comparator.comparingInt(Employee::getYearsOfService));
            System.out.println("Employee with Least Years of Service: " + leastYearsOfService.getName());

        } catch (FileNotFoundException e) 
        {
            System.err.println("Input file not found.");
        } catch (NumberFormatException e) 
        {
            System.err.println("Invalid number format in input file.");
        } catch (IllegalArgumentException e) 
        {
            System.err.println(e.getMessage());
        } catch (Exception e) 
        {
            System.err.println("An error occurred: " + e.getMessage());
        }
    }
}//end of class
